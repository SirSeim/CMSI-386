09/01/15
Functional Programming and Ocaml
________________________________

- no update
- variable is misnomer. named values.
- why is this a good thing?
	- simplified reasoning
	- mathematical functions
		given equal inputs, get equal output
		no I/O effects
	- parallelism for free
	- simplified language design
		no statements, commands
		
	- first class functions
		functions are just data
		added: Java, C#
	
ocaml.org
	exercise: tryocaml, lessons 1-4
	will not use lesson 2
	
general form: if <exp> then <exp> else <exp>
Equational Reasoning in Functional Programming:
	factorial 5
	= 5 * factorial (5-1)
	= 5 * factorial 4
	= 5 * (4 * factorial (4-1))
	...
	= 5 * (4 * (3 * (2 * (1 * 1))))
	
Pattern Matching:
	let rec factorial n =
	match n with
	| 0 -> 1
	| _ -> n * factorial (n-1)
	
	^checks matches in order
	- good functional style
	- prefer pattern matching when possible
	
09/03/15
More Ocaml
__________

- Lists:
	- [] (empty list aka "nil")
	- :: is called "cons"
		- adds a new element to the "head" of a list.
		- cons is functional:
			- let y = (1 + 2) :: x, x is unchanged
	- the "head" of a non-empty list is the first element
	- the "tail" of a non-empty list is the rest of the list
	- A list is either:
		- [] (empty list) (nil)
		- (head :: tail)
			- an element and a list
			- Cons{1 -}--> Cons{2 -}--> Cons{3 -}--> []
	- SumList uses a new pattern
		- (hd :: tl)
			- nested patterns:
				- pattern for ::, patterns for the head and tail
			- variable patterns:
				- hd and tl are variable names
				| hd::tl -> hd + sumList tl
	- Ocaml is statically type-checked. So all of the branches of a match must 
		have the same type. Also, the patterns must all match the same type.
	- Expressions
		E ::= C | X | if E then E else E
			| let X = E
			| match E with P1 -> E1
				'|' P2 -> E2
			| ...
	- Constants
		C ::= 1, []
	- Variables
		X ::= <variables>
	- Patterns
		P ::= C | _ | P::P | X
- Recursive Functions:
	1. Think about the base case(s), usually the easy part.
	2. Think about the recursive case(s). Depends on the structure of the data being traversed.
		- Assume hat the recursive call(s) do the right thing.
		- Combine the results.
- everyOther : 'a list -> 'a list
	- "polymorphic"
	- 'a is a type variable.
	everyOther [1;2;3]
	everyOther ["";"hi";"bye"]
- Sometimes we want to give names to intermediate values.
	let quadruple x = 
		match double x with
		| d -> d + d
	OR
	let quadruple x =
		let d = double x
		in d + d
- new kind of expression: let X = E in E
- note: let without "in" only allowed at the "top level"
	- Top level expression: an expression that is not a subexpression of any other expression
- Tuples:
	- like lists, contain multiple elements
		- two differences:
			1. Allowed to mix types.
			2. Fixed size.
	- (1, "hi", 2.0)
	- let (a,b) = (1, "hi)
		- a = 1
		- b = "hi"

09/08/15

____________

- Tuples are good for functions with multiple arguments.
	- Special case: is the 0-element tuple called a "unit"

09/15/15

____________

type intList = Empty | Node of int * intList

type 'a append_list =
	  Empty
	| Single of 'a
	| Append of ('a append_list * 'a append_list)
	
let rec sumList l = 
	match l with
	| Empty -> 0
	| Single x -> x
	| Append (l1, l2) -> sumList l1 + sumList l2
	
let equal ((l1,l2) : 'a append_list * 'a append_list) : bool =
	let rec to_list (l : 'a append_list) : 'a list =
		match l with
		| Empty -> []
		| Single e -> [e]
		| Append(l1,l2) -> to_list l1 @ to_list l2
	in to_list l1 = to_list l2
	
09/17/15

____________

Binary search tree:
	- for every Node (l, x, r):
		- x is greater than or equal to every element in l
		- x is less than every element in r
Equivalently:
	- Leaf is a binary search tree
	- Node(l, x, r) is a binary search tree if:
		- x is greater than or equal to every element in l, and
			x is less than every element in r

First-class functions:
	Functions are data; you can assign them to variables, take them as input to functions, and
		return them from functions.

09/22/15

____________

map: applies a function to each element of list (returns a new list)

filter: takes a "predicate" and a list, returns a new list containing the elements that satisfy the predicate

let contains e l =
	match (filter (fun x -> x = e) l) with
		| _::_ -> true
		| [] -> false

let rec filter p l = 
	match l with
		| [] -> []
		| hd :: tl when p hd -> hd :: filter p tl
		| _ :: tl -> filter p tl
