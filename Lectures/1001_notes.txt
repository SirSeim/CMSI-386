Announcements: 
  - Class is canceled next Tuesday, for inauguration 
    of new LMU President.
  - Office hours today in Doolan 200.  2-3:30 as usual.
  - Homework 2 solutions later today.
  - Homework 3 tomorrow.

Hw3: An ML Interpreter in OCaml.

  Building an interpreter involves two languages:
    - the one being interpreted (the "object" language)
    - the one you're programming in (the "meta" language)

  A meta-circular interpreter: reuse the features of the
  meta-language for your object-language interpreter.

   ex: how do we interpret ("1 + 2")?

   meta-circular approach: OCaml knows about integers and
   arithmetic. Convert "1" and "2" to OCaml integers add
   them using OCaml's + operator.



let x = 1 + 1;;
let y = 2 + x;;
let z = x + y * 3;;

(*
For each line:
  1. (READ) Parse the input.
  2. (READ) Type check. If type error, report and 
     go back to step 1.
  3. (EVAL) Evaluate.
  4. (PRINT) Print the resulting value, and its type.
  5. (LOOP) Go back to step 1.

Parsing:
   "x + y * 3"

   - convert to a list of tokens:
     keywords, variables, integer literals, etc..

     [VAR "x"; PLUS; VAR "y"; TIMES; INT 3]

   - check that the list of tokens is syntactically legal

     [PLUS; PLUS; PLUS]

   - if so, produce a data structure that represents 
     the program as an *abstract syntax tree* (AST) 
     (sometimes called a parse tree)
     - representing code as data!
     - unambiguous representation of the expression
       structure (nesting of expressions) is explicit.
     - takes into account precedence, associativity, etc.

           Plus
           /   \
          /     \
    (Var "x")  Times
               /   \
              /     \
         (Var "y")  (Int 3)
    
     x + y * 3  = x + (y * 3)
               != (x + y) * 3


     (x + y) * 3:

           Times
           /   \
          /     \
        Plus  (Int 3)
       /  \


Step 2:  Typecheck the program by traversing the AST. 

  x + y * true

 - if error then halt and print an error message

Step 3:  Evaluate the program by traversing the AST.

  x + y * 3 

    -->

  47

  - produces some representation of the result value


Step 4: Print the result value from Step 3 and the 
        type learned from Step 2.

Step 5:  Goto Step 1.

We focus here on Steps 2 and 3, and only implement
3 (plus dynamic typechecking) in HW3.

CELEBRATE!